input [0:127]   aes_data_out,
reg [0:31] pkt_ks_shifter;
output reg [ 5:0] pkt_keystream

always @(posedge clk or negedge rstn)
    if(!rstn)
        pkt_ks_buf <= '0;
    else if(pkt_ks_buf_load)
        pkt_ks_buf <= aes_data_out;

   // load keystream when it is empty and shifter has data
wire shift_pkt_ks = !pkt_ks_vld && pkt_ks_shift_size;

wire [1:0] pkt_buf_sel = 3'd4-pkt_ks_buf_size;

always @(posedge clk or negedge rstn)
    if(!rstn)
        pkt_ks_shifter <= '0;
    else if(load_pkt_shift)
        pkt_ks_shifter <= pkt_ks_buf[pkt_buf_sel];
    else if(shift_pkt_ks)
        pkt_ks_shifter <= pkt_ks_shifter << 1;

always @(posedge clk or negedge rstn)
    if(!rstn)
        pkt_keystream <= '0;
    else if(pkt_start || pkt_done || rd_ks) 
        pkt_keystream <= '0;
    else if(shift_pkt_ks)
        pkt_keystream <= pkt_keystream << 1 | pkt_ks_shifter[0];

    input   [5:0]      phy_tx_bits_i,        // 
    output  [2:0]      ecu_txbit_sig1_r_o,   // 
    output  [2:0]      ecu_txbit_sig2_r_o,   // 
    input   [1:0]      txbits_per_symbol_i,  // 

assign ecu_txbit_sig1_r_o = phy_tx_bits_i[2:0] ^ pkt_keystream_i[2:0];
assign ecu_txbit_sig2_r_o = phy_tx_bits_i[5:3] ^
                                pkt_keystream_i >> txbits_per_symbol_i;


#######################################################


    else if(pkt_ks_buf_load)
        pkt_ks_buf <= aes_data_out;
    else if(load_pkt_shift)
        pkt_ks_shifter <= pkt_ks_buf[pkt_buf_sel];
    else if(shift_pkt_ks)
        pkt_ks_shifter <= pkt_ks_shifter << 1;






   






